openapi: 3.0.3
info:
  title: Social Network
  description: |-
    This is a homework project for Service-Oriented Architectures cource
  version: 0.2.0
tags:
  - name: users
    description: Responsible for user authentication, permissions and user profiles
  - name: post
    description: Responsible for posts

paths:
  /users:
    post:
      summary: Create user
      description: Make a new user with given credentials
      tags:
        - users
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
        - name: email
          in: query
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                description: JWT token
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30
        '400':
          description: Invalid username, password or email supplied
          content:
            application/json:
              schema:
                type: object
                properties:
                  incorrectField:
                    type: string
                    example: password
                    enum:
                      - username
                      - email
                      - password
                  errorMessage:
                    type: string
                    example: Password should be at least 8 characters

    patch:
      summary: Update user info
      description: Update field(s) in user profile
      tags:
        - users
      parameters:
        - name: jwt
          in: query
          description: JWT token for updated user
          required: true
          schema:
            type: string
        - name: fieldName
          in: query
          description: Field to change value
          required: true
          schema:
            type: string
            example: firstName
            enum:
              - email
              - firstName
              - lastName
              - dateOfBirth
              - phoneNumber
        - name: newValue
          in: query
          description: New value to assign to the field
          required: true
          schema:
            type: string
            example: Alex
      responses:
        '200':
          description: Successful operation
        '400':
          description: Unsuccessful operation, new value is invalid or required parameter not found
          content:
            application/json:
              schema:
                type: string
                example: Date of birth must be in format DD.MM.YYYY
        '401':
          description: Unauthorized
        '404':
          description: Unknown field

    get:
      summary: Get user information
      description: Get all fields for user
      tags:
        - users
      parameters:
        - name: username
          in: query
          description: Target user's username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          description: No username in request
        '404':
          description: User not found

  /login:
    get:
      summary: Get token for user
      description: Login into account with login and password, and get a token for that user
      tags:
        - users
      parameters:
        - name: username
          in: query
          description: Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30
        '400':
          description: Field not found
        '401':
          description: Incorrect password
        '404':
          description: User not found

  /entry:
    get:
      summary: Get post
      tags:
        - post
      parameters:
        - name: jwt
          description: JWT token for user
          required: true
          in: query
          schema:
            type: string
        - name: postId
          description: Post ID
          required: true
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostInfo'

    post:
      summary: Create a new post
      description: Creates a new post for a user
      operationId: createPost
      tags:
        - post
      parameters:
        - name: jwt
          required: true
          in: query
          schema:
            type: string
        - name: title
          required: true
          in: query
          schema:
            type: string
        - name: description
          required: true
          in: query
          schema:
            type: string
        - name: is_private
          required: true
          in: query
          schema:
            type: string
        - name: tags
          required: true
          in: query
          schema:
            type: string
      responses:
        '201':
          description: Successfully created post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostInfo'
        '400':
          description: Invalid request
        '500':
          description: Internal server error

    put:
      summary: Update a post
      description: Updates an existing post
      operationId: putPost
      tags:
        - post
      parameters:
        - name: postId
          required: true
          in: query
          schema:
            type: integer
        - name: jwt
          required: true
          in: query
          schema:
            type: string
        - name: title
          required: true
          in: query
          schema:
            type: string
        - name: description
          required: true
          in: query
          schema:
            type: string
        - name: is_private
          required: true
          in: query
          schema:
            type: string
        - name: tags
          required: true
          in: query
          schema:
            type: string

      responses:
        '200':
          description: Successfully updated post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostInfo'
        '404':
          description: Post not found
        '400':
          description: Invalid request
        '500':
          description: Internal server error

    delete:
      summary: Delete a post
      description: Deletes a specific post
      operationId: deletePost
      tags:
        - post
      parameters:
        - name: jwt
          in: query
          required: true
          schema:
            type: string
        - name: post_id
          in: query
          required: true
          schema:
            type: integer
            format: uint32
          description: The ID of the post to delete
      responses:
        '200':
          description: Successfully deleted post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResult'
        '404':
          description: Post not found
        '400':
          description: Invalid request
        '500':
          description: Internal server error

components:
  schemas:
    Profile:
      type: object
      properties:
        username:
          type: string
          example: "alex"
        email:
          type: string
          example: "alex@wxample.com"
        firstName:
          type: string
          example: "Alex"
        lastName:
          type: string
          example: "Doe"
        dateOfBirth:
          type: string
          example: "01.01.1970"
        phoneNumber:
          type: string
          example: "18005550100"
        createdAt:
          type: integer
          example: 1740945570
        lastEditedAt:
          type: integer
          example: 1740945570

    PostInfo:
      type: object
      properties:
        post_id:
          type: integer
          format: uint32
          description: The ID of the post
        title:
          type: string
          description: The title of the post
        description:
          type: string
          description: The description/content of the post
        author:
          type: string
          description: The author of the post
        created_at:
          type: string
          format: date-time
          description: When the post was created
        last_edited_at:
          type: string
          format: date-time
          description: When the post was last edited
        is_private:
          type: boolean
          description: Whether the post is private
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the post

    DeleteResult:
      type: object
      properties:
        successful:
          type: boolean
          description: Whether the delete operation was successful

    PostsInfo:
      type: object
      properties:
        page:
          type: integer
          format: uint32
          description: The current page number
        total_pages:
          type: integer
          format: uint32
          description: The total number of pages available
        postIds:
          type: array
          items:
            type: integer
            format: uint32
          description: List of post IDs for the current page
