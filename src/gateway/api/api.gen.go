// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ErrorMessage defines model for ErrorMessage.
type ErrorMessage struct {
	Error string `json:"error"`
}

// PostInfo defines model for PostInfo.
type PostInfo struct {
	// Author Post author username
	Author *string `json:"author,omitempty"`

	// Content Post content
	Content *string `json:"content,omitempty"`

	// CreatedAt Timestamp of post creation
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// IsPrivate Is post private
	IsPrivate *bool `json:"isPrivate,omitempty"`

	// LastEditedAt Timestamp of last post edit
	LastEditedAt *time.Time `json:"lastEditedAt,omitempty"`

	// PostId Post ID
	PostId uint32 `json:"postId"`

	// Tags List of tags
	Tags *[]string `json:"tags,omitempty"`

	// Title Post title
	Title *string `json:"title,omitempty"`
}

// Profile defines model for Profile.
type Profile struct {
	CreatedAt    *int                `json:"createdAt,omitempty"`
	DateOfBirth  *openapi_types.Date `json:"dateOfBirth,omitempty"`
	Email        openapi_types.Email `json:"email"`
	FirstName    *string             `json:"firstName,omitempty"`
	LastEditedAt *int                `json:"lastEditedAt,omitempty"`
	LastName     *string             `json:"lastName,omitempty"`
	PhoneNumber  *string             `json:"phoneNumber,omitempty"`
	Username     string              `json:"username"`
}

// GetPostsParams defines parameters for GetPosts.
type GetPostsParams struct {
	Page int `form:"page" json:"page"`
}

// PostPostsJSONBody defines parameters for PostPosts.
type PostPostsJSONBody struct {
	// Content Content of the post
	Content string `json:"content"`

	// IsPrivate Is post private
	IsPrivate *bool `json:"isPrivate,omitempty"`

	// Tags List of tags
	Tags *[]string `json:"tags,omitempty"`

	// Title Title of the post
	Title string `json:"title"`
}

// PutPostsPostIdJSONBody defines parameters for PutPostsPostId.
type PutPostsPostIdJSONBody struct {
	Content *string `json:"content,omitempty"`

	// IsPrivate Is the post private
	IsPrivate *bool `json:"isPrivate,omitempty"`

	// Tags List of tags
	Tags  *[]string `json:"tags,omitempty"`
	Title *string   `json:"title,omitempty"`
}

// GetPostsPostIdCommentsParams defines parameters for GetPostsPostIdComments.
type GetPostsPostIdCommentsParams struct {
	Page int `form:"page" json:"page"`
}

// PostPostsPostIdCommentsJSONBody defines parameters for PostPostsPostIdComments.
type PostPostsPostIdCommentsJSONBody struct {
	Text string `json:"text"`
}

// PatchUsersJSONBody defines parameters for PatchUsers.
type PatchUsersJSONBody struct {
	// DateOfBirth Updated date of birth
	DateOfBirth *openapi_types.Date `json:"dateOfBirth,omitempty"`

	// Email Updated email
	Email *openapi_types.Email `json:"email,omitempty"`

	// FirstName Updated first name
	FirstName *string `json:"firstName,omitempty"`

	// LastName Updated last name
	LastName *string `json:"lastName,omitempty"`

	// PhoneNumber Updated phone number
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
	Username string              `json:"username"`
}

// PostUsersLoginJSONBody defines parameters for PostUsersLogin.
type PostUsersLoginJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// PostPostsJSONRequestBody defines body for PostPosts for application/json ContentType.
type PostPostsJSONRequestBody PostPostsJSONBody

// PutPostsPostIdJSONRequestBody defines body for PutPostsPostId for application/json ContentType.
type PutPostsPostIdJSONRequestBody PutPostsPostIdJSONBody

// PostPostsPostIdCommentsJSONRequestBody defines body for PostPostsPostIdComments for application/json ContentType.
type PostPostsPostIdCommentsJSONRequestBody PostPostsPostIdCommentsJSONBody

// PatchUsersJSONRequestBody defines body for PatchUsers for application/json ContentType.
type PatchUsersJSONRequestBody PatchUsersJSONBody

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody PostUsersJSONBody

// PostUsersLoginJSONRequestBody defines body for PostUsersLogin for application/json ContentType.
type PostUsersLoginJSONRequestBody PostUsersLoginJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a page of post list
	// (GET /posts)
	GetPosts(w http.ResponseWriter, r *http.Request, params GetPostsParams)
	// Create a new post
	// (POST /posts)
	PostPosts(w http.ResponseWriter, r *http.Request)
	// Delete a post
	// (DELETE /posts/{postId})
	DeletePostsPostId(w http.ResponseWriter, r *http.Request, postId int)
	// Get post content
	// (GET /posts/{postId})
	GetPostsPostId(w http.ResponseWriter, r *http.Request, postId int)
	// Update a post
	// (PUT /posts/{postId})
	PutPostsPostId(w http.ResponseWriter, r *http.Request, postId int)
	// Get a page of comments list
	// (GET /posts/{postId}/comments)
	GetPostsPostIdComments(w http.ResponseWriter, r *http.Request, postId int, params GetPostsPostIdCommentsParams)
	// Leave a comment
	// (POST /posts/{postId}/comments)
	PostPostsPostIdComments(w http.ResponseWriter, r *http.Request, postId int)
	// Like a post
	// (POST /posts/{postId}/likes)
	PostPostsPostIdLikes(w http.ResponseWriter, r *http.Request, postId int)
	// Statistics for the post
	// (GET /posts/{postId}/stats)
	GetPostsPostIdStats(w http.ResponseWriter, r *http.Request, postId int)
	// Post comments by day
	// (GET /posts/{postId}/stats/comments)
	GetPostsPostIdStatsComments(w http.ResponseWriter, r *http.Request, postId int)
	// Post likes by day
	// (GET /posts/{postId}/stats/likes)
	GetPostsPostIdStatsLikes(w http.ResponseWriter, r *http.Request, postId int)
	// Post views by day
	// (GET /posts/{postId}/stats/views)
	GetPostsPostIdStatsViews(w http.ResponseWriter, r *http.Request, postId int)
	// Update user information
	// (PATCH /users)
	PatchUsers(w http.ResponseWriter, r *http.Request)
	// Register new user
	// (POST /users)
	PostUsers(w http.ResponseWriter, r *http.Request)
	// Get JWT token for user
	// (POST /users/login)
	PostUsersLogin(w http.ResponseWriter, r *http.Request)
	// Get user information
	// (GET /users/{username})
	GetUsersUsername(w http.ResponseWriter, r *http.Request, username string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get a page of post list
// (GET /posts)
func (_ Unimplemented) GetPosts(w http.ResponseWriter, r *http.Request, params GetPostsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new post
// (POST /posts)
func (_ Unimplemented) PostPosts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a post
// (DELETE /posts/{postId})
func (_ Unimplemented) DeletePostsPostId(w http.ResponseWriter, r *http.Request, postId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get post content
// (GET /posts/{postId})
func (_ Unimplemented) GetPostsPostId(w http.ResponseWriter, r *http.Request, postId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a post
// (PUT /posts/{postId})
func (_ Unimplemented) PutPostsPostId(w http.ResponseWriter, r *http.Request, postId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a page of comments list
// (GET /posts/{postId}/comments)
func (_ Unimplemented) GetPostsPostIdComments(w http.ResponseWriter, r *http.Request, postId int, params GetPostsPostIdCommentsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Leave a comment
// (POST /posts/{postId}/comments)
func (_ Unimplemented) PostPostsPostIdComments(w http.ResponseWriter, r *http.Request, postId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Like a post
// (POST /posts/{postId}/likes)
func (_ Unimplemented) PostPostsPostIdLikes(w http.ResponseWriter, r *http.Request, postId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Statistics for the post
// (GET /posts/{postId}/stats)
func (_ Unimplemented) GetPostsPostIdStats(w http.ResponseWriter, r *http.Request, postId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Post comments by day
// (GET /posts/{postId}/stats/comments)
func (_ Unimplemented) GetPostsPostIdStatsComments(w http.ResponseWriter, r *http.Request, postId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Post likes by day
// (GET /posts/{postId}/stats/likes)
func (_ Unimplemented) GetPostsPostIdStatsLikes(w http.ResponseWriter, r *http.Request, postId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Post views by day
// (GET /posts/{postId}/stats/views)
func (_ Unimplemented) GetPostsPostIdStatsViews(w http.ResponseWriter, r *http.Request, postId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user information
// (PATCH /users)
func (_ Unimplemented) PatchUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register new user
// (POST /users)
func (_ Unimplemented) PostUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get JWT token for user
// (POST /users/login)
func (_ Unimplemented) PostUsersLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user information
// (GET /users/{username})
func (_ Unimplemented) GetUsersUsername(w http.ResponseWriter, r *http.Request, username string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetPosts operation middleware
func (siw *ServerInterfaceWrapper) GetPosts(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPosts(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostPosts operation middleware
func (siw *ServerInterfaceWrapper) PostPosts(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPosts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePostsPostId operation middleware
func (siw *ServerInterfaceWrapper) DeletePostsPostId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "postId" -------------
	var postId int

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePostsPostId(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPostsPostId operation middleware
func (siw *ServerInterfaceWrapper) GetPostsPostId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "postId" -------------
	var postId int

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostsPostId(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutPostsPostId operation middleware
func (siw *ServerInterfaceWrapper) PutPostsPostId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "postId" -------------
	var postId int

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutPostsPostId(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPostsPostIdComments operation middleware
func (siw *ServerInterfaceWrapper) GetPostsPostIdComments(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "postId" -------------
	var postId int

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsPostIdCommentsParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostsPostIdComments(w, r, postId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostPostsPostIdComments operation middleware
func (siw *ServerInterfaceWrapper) PostPostsPostIdComments(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "postId" -------------
	var postId int

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPostsPostIdComments(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostPostsPostIdLikes operation middleware
func (siw *ServerInterfaceWrapper) PostPostsPostIdLikes(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "postId" -------------
	var postId int

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPostsPostIdLikes(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPostsPostIdStats operation middleware
func (siw *ServerInterfaceWrapper) GetPostsPostIdStats(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "postId" -------------
	var postId int

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostsPostIdStats(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPostsPostIdStatsComments operation middleware
func (siw *ServerInterfaceWrapper) GetPostsPostIdStatsComments(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "postId" -------------
	var postId int

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostsPostIdStatsComments(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPostsPostIdStatsLikes operation middleware
func (siw *ServerInterfaceWrapper) GetPostsPostIdStatsLikes(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "postId" -------------
	var postId int

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostsPostIdStatsLikes(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPostsPostIdStatsViews operation middleware
func (siw *ServerInterfaceWrapper) GetPostsPostIdStatsViews(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "postId" -------------
	var postId int

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostsPostIdStatsViews(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchUsers operation middleware
func (siw *ServerInterfaceWrapper) PatchUsers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUsersLogin operation middleware
func (siw *ServerInterfaceWrapper) PostUsersLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsersLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsersUsername operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUsername(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithOptions("simple", "username", chi.URLParam(r, "username"), &username, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersUsername(w, r, username)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts", wrapper.GetPosts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/posts", wrapper.PostPosts)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/posts/{postId}", wrapper.DeletePostsPostId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts/{postId}", wrapper.GetPostsPostId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/posts/{postId}", wrapper.PutPostsPostId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts/{postId}/comments", wrapper.GetPostsPostIdComments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/posts/{postId}/comments", wrapper.PostPostsPostIdComments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/posts/{postId}/likes", wrapper.PostPostsPostIdLikes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts/{postId}/stats", wrapper.GetPostsPostIdStats)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts/{postId}/stats/comments", wrapper.GetPostsPostIdStatsComments)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts/{postId}/stats/likes", wrapper.GetPostsPostIdStatsLikes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts/{postId}/stats/views", wrapper.GetPostsPostIdStatsViews)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/users", wrapper.PatchUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.PostUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/login", wrapper.PostUsersLogin)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{username}", wrapper.GetUsersUsername)
	})

	return r
}
