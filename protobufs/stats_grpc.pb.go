// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: stats.proto

package stats_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Content_Stats_FullMethodName    = "/content_grpc.Content/Stats"
	Content_Daily_FullMethodName    = "/content_grpc.Content/Daily"
	Content_TopPosts_FullMethodName = "/content_grpc.Content/TopPosts"
	Content_TopUsers_FullMethodName = "/content_grpc.Content/TopUsers"
)

// ContentClient is the client API for Content service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentClient interface {
	Stats(ctx context.Context, in *PostStatsRequest, opts ...grpc.CallOption) (*PostStats, error)
	Daily(ctx context.Context, in *DailyRequest, opts ...grpc.CallOption) (*DailyStats, error)
	TopPosts(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (*TopPostList, error)
	TopUsers(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (*TopUserList, error)
}

type contentClient struct {
	cc grpc.ClientConnInterface
}

func NewContentClient(cc grpc.ClientConnInterface) ContentClient {
	return &contentClient{cc}
}

func (c *contentClient) Stats(ctx context.Context, in *PostStatsRequest, opts ...grpc.CallOption) (*PostStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostStats)
	err := c.cc.Invoke(ctx, Content_Stats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) Daily(ctx context.Context, in *DailyRequest, opts ...grpc.CallOption) (*DailyStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DailyStats)
	err := c.cc.Invoke(ctx, Content_Daily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) TopPosts(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (*TopPostList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopPostList)
	err := c.cc.Invoke(ctx, Content_TopPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentClient) TopUsers(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (*TopUserList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopUserList)
	err := c.cc.Invoke(ctx, Content_TopUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServer is the server API for Content service.
// All implementations must embed UnimplementedContentServer
// for forward compatibility.
type ContentServer interface {
	Stats(context.Context, *PostStatsRequest) (*PostStats, error)
	Daily(context.Context, *DailyRequest) (*DailyStats, error)
	TopPosts(context.Context, *TopRequest) (*TopPostList, error)
	TopUsers(context.Context, *TopRequest) (*TopUserList, error)
	mustEmbedUnimplementedContentServer()
}

// UnimplementedContentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContentServer struct{}

func (UnimplementedContentServer) Stats(context.Context, *PostStatsRequest) (*PostStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedContentServer) Daily(context.Context, *DailyRequest) (*DailyStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Daily not implemented")
}
func (UnimplementedContentServer) TopPosts(context.Context, *TopRequest) (*TopPostList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopPosts not implemented")
}
func (UnimplementedContentServer) TopUsers(context.Context, *TopRequest) (*TopUserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopUsers not implemented")
}
func (UnimplementedContentServer) mustEmbedUnimplementedContentServer() {}
func (UnimplementedContentServer) testEmbeddedByValue()                 {}

// UnsafeContentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServer will
// result in compilation errors.
type UnsafeContentServer interface {
	mustEmbedUnimplementedContentServer()
}

func RegisterContentServer(s grpc.ServiceRegistrar, srv ContentServer) {
	// If the following call pancis, it indicates UnimplementedContentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Content_ServiceDesc, srv)
}

func _Content_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_Stats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).Stats(ctx, req.(*PostStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_Daily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).Daily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_Daily_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).Daily(ctx, req.(*DailyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_TopPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).TopPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_TopPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).TopPosts(ctx, req.(*TopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Content_TopUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServer).TopUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Content_TopUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServer).TopUsers(ctx, req.(*TopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Content_ServiceDesc is the grpc.ServiceDesc for Content service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Content_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content_grpc.Content",
	HandlerType: (*ContentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stats",
			Handler:    _Content_Stats_Handler,
		},
		{
			MethodName: "Daily",
			Handler:    _Content_Daily_Handler,
		},
		{
			MethodName: "TopPosts",
			Handler:    _Content_TopPosts_Handler,
		},
		{
			MethodName: "TopUsers",
			Handler:    _Content_TopUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stats.proto",
}
