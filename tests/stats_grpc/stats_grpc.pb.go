// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: stats.proto

package stats_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Stats_Stats_FullMethodName    = "/stats_grpc.Stats/Stats"
	Stats_Daily_FullMethodName    = "/stats_grpc.Stats/Daily"
	Stats_TopPosts_FullMethodName = "/stats_grpc.Stats/TopPosts"
	Stats_TopUsers_FullMethodName = "/stats_grpc.Stats/TopUsers"
)

// StatsClient is the client API for Stats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatsClient interface {
	Stats(ctx context.Context, in *PostStatsRequest, opts ...grpc.CallOption) (*PostStats, error)
	Daily(ctx context.Context, in *DailyRequest, opts ...grpc.CallOption) (*DailyStats, error)
	TopPosts(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (*TopPostList, error)
	TopUsers(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (*TopUserList, error)
}

type statsClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsClient(cc grpc.ClientConnInterface) StatsClient {
	return &statsClient{cc}
}

func (c *statsClient) Stats(ctx context.Context, in *PostStatsRequest, opts ...grpc.CallOption) (*PostStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostStats)
	err := c.cc.Invoke(ctx, Stats_Stats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) Daily(ctx context.Context, in *DailyRequest, opts ...grpc.CallOption) (*DailyStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DailyStats)
	err := c.cc.Invoke(ctx, Stats_Daily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) TopPosts(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (*TopPostList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopPostList)
	err := c.cc.Invoke(ctx, Stats_TopPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) TopUsers(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (*TopUserList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopUserList)
	err := c.cc.Invoke(ctx, Stats_TopUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatsServer is the server API for Stats service.
// All implementations must embed UnimplementedStatsServer
// for forward compatibility.
type StatsServer interface {
	Stats(context.Context, *PostStatsRequest) (*PostStats, error)
	Daily(context.Context, *DailyRequest) (*DailyStats, error)
	TopPosts(context.Context, *TopRequest) (*TopPostList, error)
	TopUsers(context.Context, *TopRequest) (*TopUserList, error)
	mustEmbedUnimplementedStatsServer()
}

// UnimplementedStatsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatsServer struct{}

func (UnimplementedStatsServer) Stats(context.Context, *PostStatsRequest) (*PostStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedStatsServer) Daily(context.Context, *DailyRequest) (*DailyStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Daily not implemented")
}
func (UnimplementedStatsServer) TopPosts(context.Context, *TopRequest) (*TopPostList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopPosts not implemented")
}
func (UnimplementedStatsServer) TopUsers(context.Context, *TopRequest) (*TopUserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopUsers not implemented")
}
func (UnimplementedStatsServer) mustEmbedUnimplementedStatsServer() {}
func (UnimplementedStatsServer) testEmbeddedByValue()               {}

// UnsafeStatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsServer will
// result in compilation errors.
type UnsafeStatsServer interface {
	mustEmbedUnimplementedStatsServer()
}

func RegisterStatsServer(s grpc.ServiceRegistrar, srv StatsServer) {
	// If the following call pancis, it indicates UnimplementedStatsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Stats_ServiceDesc, srv)
}

func _Stats_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stats_Stats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).Stats(ctx, req.(*PostStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_Daily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).Daily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stats_Daily_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).Daily(ctx, req.(*DailyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_TopPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).TopPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stats_TopPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).TopPosts(ctx, req.(*TopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_TopUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).TopUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stats_TopUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).TopUsers(ctx, req.(*TopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Stats_ServiceDesc is the grpc.ServiceDesc for Stats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stats_grpc.Stats",
	HandlerType: (*StatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stats",
			Handler:    _Stats_Stats_Handler,
		},
		{
			MethodName: "Daily",
			Handler:    _Stats_Daily_Handler,
		},
		{
			MethodName: "TopPosts",
			Handler:    _Stats_TopPosts_Handler,
		},
		{
			MethodName: "TopUsers",
			Handler:    _Stats_TopUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stats.proto",
}
